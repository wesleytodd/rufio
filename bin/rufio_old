#!/usr/bin/env node

var commander = require('commander'),
	path = require('path'),
	exec = require('child_process').exec,
	Rufio = require('..'),
	RufioServer = require('rufio-server').RufioServer;

// CLI options
commander
	.version(Rufio.version)
	.option('-V, --version', 'output the version number')
	.option('-v, --verbose', 'Verbose logging')
	.option('-l, --log-level [level]', 'Set the log level')
	.option('-s, --silent', 'Silent output')
	.option('-B, --boring', 'Boring output')
	.option('-d, --dev', 'Sets RUFIO_ENVIRONMENT to dev')
	.option('-e, --environment [environment]', 'Sets ENVIRONMENT to the supplied value')
	.option('-b, --build-version [version]', 'Sets build:active config to the supplied value')
	.option('-r, --site-root [path]', 'Sets the site root path')
	.option('-f, --log-file [path]', 'Sets a log file, disables console logging')
	.usage('COMMAND [options]')
;

// Process options
commander.on('verbose', function() {
	// Verbose logging overrides normal log level setting
	commander.logLevel = 'info';
});
commander.on('dev', function() {
	// Dev flag
	commander.environment = 'dev';
});

// Help command
commander
	.command('help')
	.description('Display this usage information.')
	.action(commander.help)
;

// Build command
commander
	.command('build [ver]')
	.description('Builds the site. Specify an optional version.')
	.action(function(ver){

		// Create rufio instance
		var rufio = new Rufio({
			rufio: {
				logLevel: commander.logLevel,
				silent: commander.silent,
				cli: (commander.boring) ? false : true,
				logFile: commander.logFile,
			},
			buildVersion: commander.buildVersion || ver,
			siteRoot: commander.siteRoot,
			environment: commander.environment,
		});

		// Start Rufio
		rufio.init(function(err) {
			if (err) {
				rufio.logger.error('Rufio failed to initalize.');
				process.exit(1);
			}

			// Load
			rufio.loadAll(function(err) {
				if (err) {
					rufio.logger.error(err);
					process.exit(1);
				}

				// Write
				rufio.writeAll(function(e) {

					// Log complete
					rufio.logger.info('Site build complete to version: ' + rufio.config.get('build:active'));
				});
			});
		});

	});

// Change Active Version
commander
	.command('chver <ver>')
	.description('Changes the active version.')
	.action(function(ver) {

		// Create rufio instance
		var rufio = new Rufio();

		// Start Rufio
		rufio.init(function() {
			// Link the version to active
			exec('ln -sfn ./' + ver + ' ./active', {
				cwd: path.join(this.SITE_ROOT, this.config.get('build:directory'))
			}, function(err, stdout, stderr) {
				if (err) return console.error(err);
				console.log('Active build changed to ' + ver);
			});
		});
	});

// Start Nginx Server
commander
	.command('serve')
	.description('Runs an Express server for the Rufio site.')
	.action(function(host, port) {

		// Create rufio instance
		var rufio = new Rufio({
			rufio: {
				logLevel: commander.logLevel,
				silent: commander.silent,
				cli: false,
				logFile: commander.logFile || 'rufio.log',
			},
			buildVersion: commander.buildVersion,
			siteRoot: commander.siteRoot,
			environment: commander.environment,
		});

		// Start Rufio
		rufio.init(function(err) {
			if (err) {
				rufio.logger.error(err);
				process.exit(1);
			}

			var server = new RufioServer(rufio);
			server.start();

		});
	});

// Parse the args
commander.parse(process.argv);

// If no other command was given show help
if (!commander.args.length) {
	return commander.help();
}
